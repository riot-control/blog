<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Riot Control]]></title>
  <link href="http://www.riot-control.net/atom.xml" rel="self"/>
  <link href="http://www.riot-control.net/"/>
  <updated>2013-12-03T13:46:07+00:00</updated>
  <id>http://www.riot-control.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The almighty interactor]]></title>
    <link href="http://www.riot-control.net/2013/12/03/the-almighty-interactor/"/>
    <updated>2013-12-03T13:21:00+00:00</updated>
    <id>http://www.riot-control.net/2013/12/03/the-almighty-interactor</id>
    <content type="html"><![CDATA[<p>The concept of the <em>interactor</em> is the biggest breakthrough that I have experienced in my
evolution as a programmer. It&rsquo;s simple, and it has always been right beside me. But
I have only acknowledged it when I saw <a href="http://www.riot-control.net/2013/10/11/architecture-the-lost-years/">Arquitecthure: the lost years</a>.</p>

<p>The concept is very simple. An interactor is:</p>

<ul>
<li>A class that handles business logic</li>
<li>It solves only one problem</li>
<li>It has a name in the form of an action: CreatePost, SendEmail, FinalizeDocument</li>
<li>It does not know anything about persistence (e.g. databases, ORM&rsquo;s)
and delivery mechanisms (e.g. Sinatra, Rails, CLI)</li>
<li>It maps directly to an use case, and only one use case</li>
</ul>


<p>An interactor like CreatePost needs to persist stuff. But it cannot know how.
To do so, it delegates the persistance to another class, a <em>gateway</em>. This gateway
may be an object that knows the persistence layer, or may be a dummy memory representation.</p>

<p>This separation makes sure that the interactor stays focused on it&rsquo;s task. And remains
very light. By being a plain ruby object, the interactor doesn&rsquo;t have dependecies
that will slow it down when running/booting tests.</p>

<p>Here&rsquo;s a small example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddNumbers</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@numbers</span> <span class="o">=</span> <span class="n">numbers</span> <span class="o">||</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">may_run?</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="vi">@numbers</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the application knows how to add numbers via the <em>AddNumbers</em> class. We can create some
fast, database and framework independent unit tests. We can run it on <em>irb</em>, on a rake task
or on an async worker.</p>

<p>We build our application on top of interactors. And so should you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Architecture: The Lost Years]]></title>
    <link href="http://www.riot-control.net/2013/10/11/architecture-the-lost-years/"/>
    <updated>2013-10-11T13:47:00+01:00</updated>
    <id>http://www.riot-control.net/2013/10/11/architecture-the-lost-years</id>
    <content type="html"><![CDATA[

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('WpkDN78P884');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/WpkDN78P884?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/WpkDN78P884/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=WpkDN78P884" id="WpkDN78P884" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Ruby Midwest 2011 - Keynote: Architecture the Lost Years by Robert Martin</div>
</a>
<div class="video-info" >Robert C. Martin (Uncle Bob) has been a software professional since 1970. In the last 40 years, he has worked in various capacities on literally hundreds of software projects. He has authored &#8220;landmark&#8221; books on Agile Programming, Extreme Programming, UML, Object-Oriented Programming, C++ Programming and Clean Code. He has published dozens of articles in various trade journals. Today, he is one of the software industry&#8217;s leading authorities on Agile software development and is a regular speaker at international conferences and trade shows. He is a former editor of the C++ Report and writes regular blogs at http://cleancoder.posterous.com/.</div>
</div>



]]></content>
  </entry>
  
</feed>
