<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: books | Riot Control]]></title>
  <link href="http://www.riot-control.net/categories/books/atom.xml" rel="self"/>
  <link href="http://www.riot-control.net/"/>
  <updated>2014-02-14T14:56:54+00:00</updated>
  <id>http://www.riot-control.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objects on Rails Book]]></title>
    <link href="http://www.riot-control.net/2014/02/14/objects-on-rails/"/>
    <updated>2014-02-14T13:47:00+00:00</updated>
    <id>http://www.riot-control.net/2014/02/14/objects-on-rails</id>
    <content type="html"><![CDATA[<p>Some time ago our team started to write code differently. Inspired by <a href="/2013/10/11/architecture-the-lost-years/">Architecture: The Lost Years</a>,
we started using <a href="/2013/12/03/the-almighty-interactor/">interactors</a> and <a href="/2013/11/27/refactoring-views-with-presenters-ruby-on-rails/">presenters</a>, greatly improving our code base.
We also started writting <em>rails-free</em> unit tests. It&rsquo;s good to know that <a href="http://devblog.reverb.com/post/70344683203/5-architecture-anti-patterns-and-solutions-for-large">we are not alone on this process</a>.
The <a href="http://objectsonrails.com/">Objects on Rails book</a> shows a step by step process to build this kind of code.</p>

<!-- more -->


<p>I really loved this book. It&rsquo;s more on the rails side than I would like, but it
still provided an enourmous amount of insights on application development. It&rsquo;s
also very <em>ruby intensive</em>, and I confess that I prefer code without deep ruby tricks.</p>

<p>I&rsquo;m awalys saying that I don&rsquo;t like to use constants in code. I always like an
abstraction on top of constants. Imagine that you have:</p>

<p><code>ruby
PER_PAGE = 10
</code></p>

<p>And you use the <em>PER_PAGE</em> all over the place. Now if you need to have logic on
<em>per page</em>, for example, depending on the current user, you&rsquo;ll have to change it
all over the place. That&rsquo;s why I always do:</p>

<p><code>ruby
def per_page
  10
end
</code></p>

<p>Objects on Rails made me think about this on a wider scope. This is a code smell:</p>

<p><code>ruby
doc = Document.find(params[:id])
</code></p>

<p>I we have this code all over the place, what happens if we need to inject some
logic on that find? An alternative:</p>

<p>``` ruby
def find_document(id, finder=Document)
  finder.find(id)
end</p>

<p>doc = find_document(params[:id])
```</p>

<p>This makes the code so much better for so many different reasons&hellip; The author
goes on step further and makes all ActiveRecord interface private on the models,
forcing you to write better code.</p>

<p>You can read the book online for free or spend 5$ and have it digital. It&rsquo;s a must
read!</p>
]]></content>
  </entry>
  
</feed>
