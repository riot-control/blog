<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software development | Riot Control]]></title>
  <link href="http://www.riot-control.net/categories/software-development/atom.xml" rel="self"/>
  <link href="http://www.riot-control.net/"/>
  <updated>2014-02-14T14:48:46+00:00</updated>
  <id>http://www.riot-control.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Confident code]]></title>
    <link href="http://www.riot-control.net/2013/12/23/confident-code/"/>
    <updated>2013-12-23T13:47:00+00:00</updated>
    <id>http://www.riot-control.net/2013/12/23/confident-code</id>
    <content type="html"><![CDATA[<p>In Paulo&rsquo;s post about <a href="/2013/11/27/refactoring-views-with-presenters-ruby-on-rails/">presenters and views</a>,
he talked about how to make the view free of business logic. This is
<em>confident coding</em>. The following <em>talk</em> shows this in a wider perspective. Not
only for views/presenters, but for all code.</p>

<p>
<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('T8J0j2xJFgQ');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/T8J0j2xJFgQ?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/T8J0j2xJFgQ/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=T8J0j2xJFgQ" id="T8J0j2xJFgQ" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Ruby Midwest 2011 Confident Code by Avdi Grimm</div>
</a>
<div class="video-info" >Are your methods timid? Do they constantly second-guess themselves, checking for nil values, errors, and unexpected input? Even the cleanest Ruby codebases can become littered over time with nil checks, error handling, and other interruptions which steal attention away from the essential purpose of the code. This talk will discuss strategies for writing your Ruby classes and methods in a confident, straightforward style; without sacrificing functionality or robustness. In the process, we'll cover concepts and techniques points including: The narrative style of method construction The four parts of a method Three strategies for dealing with uncertain input Massaging input with coercion and the Decorator pattern Lightweight preconditions Exterminating nils from your code The chaining and iterative styles of method construction Eliminating conditionals with the Special Case and Null Object patterns Isolating errors with the Bouncer and Checked Method patterns</div>
</div>

</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Development by copy paste]]></title>
    <link href="http://www.riot-control.net/2013/12/18/development-by-copy-paste/"/>
    <updated>2013-12-18T13:21:00+00:00</updated>
    <id>http://www.riot-control.net/2013/12/18/development-by-copy-paste</id>
    <content type="html"><![CDATA[<p>I believe that <em>development by copy paste</em> is the worst work process that a programmer
may have. I&rsquo;m talking about having a piece of software working, and copying it
fully to another location on the same project, and performing some changes.</p>

<!-- more -->


<p> I may write some poor code if I&rsquo;m tired or in a rush. My compromise is that a
 piece of code may be poorly written, but there is only one point of access. It
 may be refactored later and unit tested later. And all the code that uses the bad one
 won&rsquo;t need to be changed (hopefully :).</p>

<p> When we copy paste large portions of code, we are creating a maintenance hell.
 No longer will we be able to change something in just one place. We&rsquo;ll have to find
 all related places to change that. And guess what? We will always miss the majority
 of them.</p>

<p>Some may argue that using this process is faster. I disagree. And I hope I&rsquo;ll never
have to support code from these guys.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The almighty interactor]]></title>
    <link href="http://www.riot-control.net/2013/12/03/the-almighty-interactor/"/>
    <updated>2013-12-03T13:21:00+00:00</updated>
    <id>http://www.riot-control.net/2013/12/03/the-almighty-interactor</id>
    <content type="html"><![CDATA[<p>The concept of the <em>interactor</em> is the biggest breakthrough that I have experienced in my
evolution as a programmer. It&rsquo;s simple, and it has always been right beside me. But
I have only acknowledged it when I saw <a href="/2013/10/11/architecture-the-lost-years/">Arquitecthure: the lost years</a>.</p>

<p>The concept is very simple. An interactor is:</p>

<!-- more -->


<ul>
<li>A class that handles business logic</li>
<li>It solves only one problem</li>
<li>It has a name in the form of an action: CreatePost, SendEmail, FinalizeDocument</li>
<li>It does not know anything about persistence (e.g. databases, ORM&rsquo;s)
and delivery mechanisms (e.g. Sinatra, Rails, CLI)</li>
<li>It maps directly to an use case, and only one use case</li>
</ul>


<p>An interactor like CreatePost needs to persist stuff. But it cannot know how.
To do so, it delegates the persistance to another class, a <em>gateway</em>. This gateway
may be an object that knows the persistence layer, or may be a dummy memory representation.</p>

<p>This separation makes sure that the interactor stays focused on it&rsquo;s task. And remains
very light. By being a plain ruby object, the interactor doesn&rsquo;t have dependecies
that will slow it down when running/booting tests.</p>

<p>Here&rsquo;s a small example:</p>

<p>``` ruby
class AddNumbers</p>

<p>  def initialize(*numbers)</p>

<pre><code>@numbers = numbers || []
</code></pre>

<p>  end</p>

<p>  def may_run?</p>

<pre><code>true
</code></pre>

<p>  end</p>

<p>  def run</p>

<pre><code>@numbers.inject(&amp;:+)
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Now the application knows how to add numbers via the <em>AddNumbers</em> class. We can create some
fast, database and framework independent unit tests. We can run it on <em>irb</em>, on a rake task
or on an async worker.</p>

<p>We build our application on top of interactors. And so should you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Views with Presenters (Ruby on Rails)]]></title>
    <link href="http://www.riot-control.net/2013/11/27/refactoring-views-with-presenters-ruby-on-rails/"/>
    <updated>2013-11-27T00:00:00+00:00</updated>
    <id>http://www.riot-control.net/2013/11/27/refactoring-views-with-presenters-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>In a <strong>Ruby on Rails</strong> application, views can get really messy over time. They tend to grow into large files with <strong>if else blocks</strong> scattered all over the place.</p>

<p>Lately I&rsquo;ve been working on an existing application with views like these. My goal was to remove all the logic from the views into <strong>presenters</strong>, making the views smaller, more readable and easier to maintain.</p>

<!-- more -->


<p><strong>Let&rsquo;s look at an example:</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;%# api.html.erb (before refactoring) </span><span class="err">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;div class=&quot;span9 no-margin&quot;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">current_membership</span><span class="o">.</span><span class="n">api_is_enabled?</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;p&gt;</span>
</span><span class='line'><span class="x">      &lt;span class=&quot;api_key&quot;&gt;</span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">current_membership</span><span class="o">.</span><span class="n">api_key</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;/span&gt;</span>
</span><span class='line'><span class="x">    &lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    &lt;div class=&quot;mButton float_right&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">t</span><span class="p">(</span><span class="s1">&#39;settings.api_regenerate&#39;</span><span class="p">),</span> <span class="n">api_key_path</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:post</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s1">&#39;aButton&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    &lt;div class=&quot;mButton float_right&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">t</span><span class="p">(</span><span class="s1">&#39;settings.api_disable&#39;</span><span class="p">),</span> <span class="n">api_key_path</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s1">&#39;aButton&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">    </span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;div class=&quot;mButton float_right&quot;&gt;</span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;%=</span> <span class="n">link_to</span><span class="p">(</span><span class="n">t</span><span class="p">(</span><span class="s1">&#39;settings.api_generate&#39;</span><span class="p">),</span> <span class="n">api_key_path</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:post</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s1">&#39;aButton&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This view renders different html depending on the condition <strong>@user.current_membership.api_is_enabled?</strong>. What if in a near future another condition is needed? Probably an <strong>elsif</strong> would be added here and the view would grow even more. At some point it gets hard to understand the structure of the html. And when you know it, there&rsquo;s already repeated code in the view. Yes, you can always put that code in a helper. But I&rsquo;m not a fan of that approach either. Why? Because when calling helper methods in the view, it&rsquo;s not obvious where they come from. It feels like you&rsquo;re calling a function, not a method. Also, if multiple helpers are included in the view and there are methods with the same name, you&rsquo;ll get unexpected behavior.</p>

<p>Now, by placing the logic in a presenter you gain two things. First, the view contains only the html structure of the page. There is no decision making. The view acts simply as a template that shows data. Second, the code is placed in methods of the presenter. And by giving meaningful names, it becomes clear what the code does.</p>

<p><strong>Here&rsquo;s how the presenter looks like:</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;api_key_presenter.rb&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">ApiKeyPresenter</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def initialize(controller, view, user)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@controller</span> <span class="o">=</span> <span class="n">controller</span>
</span><span class='line'><span class="vi">@view</span> <span class="o">=</span> <span class="n">view</span>
</span><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def api_key&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">api_key_enabled?</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">t</span><span class="p">(</span><span class="s1">&#39;settings.api_description&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&amp;lt;span class=&#39;apiKey&#39;&amp;gt;</span><span class="si">#{</span><span class="n">current_api_key</span><span class="si">}</span><span class="s2">&amp;lt;/span&amp;gt;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def generate_api_key_button&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@view</span><span class="o">.</span><span class="n">link_to</span> <span class="n">t</span><span class="p">(</span><span class="s1">&#39;settings.api_regenerate&#39;</span><span class="p">),</span> <span class="n">path</span><span class="p">(</span><span class="ss">:api_key_path</span><span class="p">),</span> <span class="ss">:method</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="ss">:post</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;smallPrimaryButton rightButton&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def disable_api_key_button&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">api_key_enabled?</span>
</span><span class='line'>  <span class="vi">@view</span><span class="o">.</span><span class="n">link_to</span> <span class="n">t</span><span class="p">(</span><span class="s1">&#39;settings.api_disable&#39;</span><span class="p">),</span> <span class="n">path</span><span class="p">(</span><span class="ss">:api_key_path</span><span class="p">),</span> <span class="ss">:method</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;smallDeleteButton&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;private&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">api_key_enabled?</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@user.current_membership.api_is_enabled?</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">current_api_key</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@user.current_membership.api_key</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">path</span><span class="p">(</span><span class="n">sym</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@controller.send(sym, args)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <strong>presenter</strong> has three public methods that can be used in the view: <strong>api_key</strong>, <strong>generate_api_key_button</strong> and <strong>disable_api_key_button</strong>. These method&rsquo;s names are clear and it&rsquo;s easy to understand what they do. The logic is in the presenter and the code is reusable and more maintainable.</p>

<p><strong>Here&rsquo;s how you can create the presenter in the controller:</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;users_controller.rb&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def api&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user</span> <span class="o">=</span> <span class="n">current_account</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="vi">@presenter</span> <span class="o">=</span> <span class="no">ApiKeyPresenter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="vi">@template</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can see, three arguments are passed to the presenter: <strong>self</strong> (the controller), <strong>@template</strong> (the view) and the <strong>user</strong>.</p>

<p>(Note: In Rails 2 you can use <strong>@template</strong> to access the view. In Rails 3, <strong>@template</strong> would be replaced by <strong>view_context</strong>.)</p>

<p><strong>Let&rsquo;s see what the view looks like when using the presenter:</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;%# api.html.erb (after refactoring) </span><span class="err">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;div class=&quot;span9 no-margin&quot;&gt;</span>
</span><span class='line'><span class="x">  &lt;p class=&quot;description&quot;&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="vi">@presenter</span><span class="o">.</span><span class="n">api_key</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;div id=&quot;containerBodyActions&quot;&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="vi">@presenter</span><span class="o">.</span><span class="n">generate_api_key_button</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="vi">@presenter</span><span class="o">.</span><span class="n">disable_api_key_button</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The view looks a lot nicer now. The html structure is clear, there&rsquo;s no logic in the view and there&rsquo;s no repeated code.</p>

<h1>Conclusion</h1>


<p>This example illustrates one of the many views I refactored. Not all of them were this simple but I think it&rsquo;s easier to show my point of view with a simple case.</p>

<p>These are the three major benefits I think this approach offers:</p>

<ul>
<li>Cleaner view</li>
<li>DRY code (presenter methods)</li>
<li>Separation of concerns</li>
</ul>


<p>Next time I start a new Ruby on Rails app, I will definitely use <strong>presenters</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Architecture: The Lost Years]]></title>
    <link href="http://www.riot-control.net/2013/10/11/architecture-the-lost-years/"/>
    <updated>2013-10-11T13:47:00+01:00</updated>
    <id>http://www.riot-control.net/2013/10/11/architecture-the-lost-years</id>
    <content type="html"><![CDATA[<p>
<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('WpkDN78P884');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/WpkDN78P884?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/WpkDN78P884/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=WpkDN78P884" id="WpkDN78P884" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Ruby Midwest 2011 - Keynote: Architecture the Lost Years by Robert Martin</div>
</a>
<div class="video-info" >Robert C. Martin (Uncle Bob) has been a software professional since 1970. In the last 40 years, he has worked in various capacities on literally hundreds of software projects. He has authored "landmark" books on Agile Programming, Extreme Programming, UML, Object-Oriented Programming, C++ Programming and Clean Code. He has published dozens of articles in various trade journals. Today, he is one of the software industry's leading authorities on Agile software development and is a regular speaker at international conferences and trade shows. He is a former editor of the C++ Report and writes regular blogs at http://cleancoder.posterous.com/.</div>
</div>

</p>
]]></content>
  </entry>
  
</feed>
