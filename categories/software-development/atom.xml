<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software development | Riot Control]]></title>
  <link href="http://www.riot-control.net/categories/software-development/atom.xml" rel="self"/>
  <link href="http://www.riot-control.net/"/>
  <updated>2014-04-09T11:26:27+01:00</updated>
  <id>http://www.riot-control.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spotify culture]]></title>
    <link href="http://www.riot-control.net/2014/04/09/spotify-culture/"/>
    <updated>2014-04-09T00:00:00+01:00</updated>
    <id>http://www.riot-control.net/2014/04/09/spotify-culture</id>
    <content type="html"><![CDATA[<p>Culture matters. We try hard to have a good culture on our team, a culture
of quality, helping each other, learning and having fun. This video from
Spotify is a great showcase of a good culture. But the most important thing isn&rsquo;t
their culture, it&rsquo;s the continuous effort to improve it.</p>

<iframe src="http://www.riot-control.net//player.vimeo.com/video/85490944?byline=0" width="500" height="313" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p> <p><a href="http://vimeo.com/85490944">Spotify Engineering Culture &ndash; part 1</a> from <a href="http://vimeo.com/user14023874">Spotify Training &amp; Development</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objects on Rails Book]]></title>
    <link href="http://www.riot-control.net/2014/02/14/objects-on-rails/"/>
    <updated>2014-02-14T13:47:00+00:00</updated>
    <id>http://www.riot-control.net/2014/02/14/objects-on-rails</id>
    <content type="html"><![CDATA[<p>Some time ago our team started to write code differently. Inspired by <a href="/2013/10/11/architecture-the-lost-years/">Architecture: The Lost Years</a>,
we started using <a href="/2013/12/03/the-almighty-interactor/">interactors</a> and <a href="/2013/11/27/refactoring-views-with-presenters-ruby-on-rails/">presenters</a>, greatly improving our code base.
We also started writting <em>rails-free</em> unit tests. It&rsquo;s good to know that <a href="http://devblog.reverb.com/post/70344683203/5-architecture-anti-patterns-and-solutions-for-large">we are not alone on this process</a>.
The <a href="http://objectsonrails.com/">Objects on Rails book</a> shows a step by step process to build this kind of code.</p>

<!-- more -->


<p>I really loved this book. It&rsquo;s more on the rails side than I would like, but it
still provided an enourmous amount of insights on application development. It&rsquo;s
also very <em>ruby intensive</em>, and I confess that I prefer code without deep ruby tricks.</p>

<p>I&rsquo;m awalys saying that I don&rsquo;t like to use constants in code. I always like an
abstraction on top of constants. Imagine that you have:</p>

<p><code>ruby
PER_PAGE = 10
</code></p>

<p>And you use the <em>PER_PAGE</em> all over the place. Now if you need to have logic on
<em>per page</em>, for example, depending on the current user, you&rsquo;ll have to change it
all over the place. That&rsquo;s why I always do:</p>

<p><code>ruby
def per_page
  10
end
</code></p>

<p>Objects on Rails made me think about this on a wider scope. This is a code smell:</p>

<p><code>ruby
doc = Document.find(params[:id])
</code></p>

<p>I we have this code all over the place, what happens if we need to inject some
logic on that find? An alternative:</p>

<p>``` ruby
def find_document(id, finder=Document)
  finder.find(id)
end</p>

<p>doc = find_document(params[:id])
```</p>

<p>This makes the code so much better for so many different reasons&hellip; The author
goes on step further and makes all ActiveRecord interface private on the models,
forcing you to write better code.</p>

<p>You can read the book online for free or spend 5$ and have it digital. It&rsquo;s a must
read!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Confident code]]></title>
    <link href="http://www.riot-control.net/2013/12/23/confident-code/"/>
    <updated>2013-12-23T13:47:00+00:00</updated>
    <id>http://www.riot-control.net/2013/12/23/confident-code</id>
    <content type="html"><![CDATA[<p>In Paulo&rsquo;s post about <a href="/2013/11/27/refactoring-views-with-presenters-ruby-on-rails/">presenters and views</a>,
he talked about how to make the view free of business logic. This is
<em>confident coding</em>. The following <em>talk</em> shows this in a wider perspective. Not
only for views/presenters, but for all code.</p>

<p>
<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('T8J0j2xJFgQ');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/T8J0j2xJFgQ?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/T8J0j2xJFgQ/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=T8J0j2xJFgQ" id="T8J0j2xJFgQ" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Ruby Midwest 2011 Confident Code by Avdi Grimm</div>
</a>
<div class="video-info" >Are your methods timid? Do they constantly second-guess themselves, checking for nil values, errors, and unexpected input? Even the cleanest Ruby codebases can become littered over time with nil checks, error handling, and other interruptions which steal attention away from the essential purpose of the code. This talk will discuss strategies for writing your Ruby classes and methods in a confident, straightforward style; without sacrificing functionality or robustness. In the process, we'll cover concepts and techniques points including: The narrative style of method construction The four parts of a method Three strategies for dealing with uncertain input Massaging input with coercion and the Decorator pattern Lightweight preconditions Exterminating nils from your code The chaining and iterative styles of method construction Eliminating conditionals with the Special Case and Null Object patterns Isolating errors with the Bouncer and Checked Method patterns</div>
</div>

</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Development by copy paste]]></title>
    <link href="http://www.riot-control.net/2013/12/18/development-by-copy-paste/"/>
    <updated>2013-12-18T13:21:00+00:00</updated>
    <id>http://www.riot-control.net/2013/12/18/development-by-copy-paste</id>
    <content type="html"><![CDATA[<p>I believe that <em>development by copy paste</em> is the worst work process that a programmer
may have. I&rsquo;m talking about having a piece of software working, and copying it
fully to another location on the same project, and performing some changes.</p>

<!-- more -->


<p> I may write some poor code if I&rsquo;m tired or in a rush. My compromise is that a
 piece of code may be poorly written, but there is only one point of access. It
 may be refactored later and unit tested later. And all the code that uses the bad one
 won&rsquo;t need to be changed (hopefully :).</p>

<p> When we copy paste large portions of code, we are creating a maintenance hell.
 No longer will we be able to change something in just one place. We&rsquo;ll have to find
 all related places to change that. And guess what? We will always miss the majority
 of them.</p>

<p>Some may argue that using this process is faster. I disagree. And I hope I&rsquo;ll never
have to support code from these guys.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The almighty interactor]]></title>
    <link href="http://www.riot-control.net/2013/12/03/the-almighty-interactor/"/>
    <updated>2013-12-03T13:21:00+00:00</updated>
    <id>http://www.riot-control.net/2013/12/03/the-almighty-interactor</id>
    <content type="html"><![CDATA[<p>The concept of the <em>interactor</em> is the biggest breakthrough that I have experienced in my
evolution as a programmer. It&rsquo;s simple, and it has always been right beside me. But
I have only acknowledged it when I saw <a href="/2013/10/11/architecture-the-lost-years/">Arquitecthure: the lost years</a>.</p>

<p>The concept is very simple. An interactor is:</p>

<!-- more -->


<ul>
<li>A class that handles business logic</li>
<li>It solves only one problem</li>
<li>It has a name in the form of an action: CreatePost, SendEmail, FinalizeDocument</li>
<li>It does not know anything about persistence (e.g. databases, ORM&rsquo;s)
and delivery mechanisms (e.g. Sinatra, Rails, CLI)</li>
<li>It maps directly to an use case, and only one use case</li>
</ul>


<p>An interactor like CreatePost needs to persist stuff. But it cannot know how.
To do so, it delegates the persistance to another class, a <em>gateway</em>. This gateway
may be an object that knows the persistence layer, or may be a dummy memory representation.</p>

<p>This separation makes sure that the interactor stays focused on it&rsquo;s task. And remains
very light. By being a plain ruby object, the interactor doesn&rsquo;t have dependecies
that will slow it down when running/booting tests.</p>

<p>Here&rsquo;s a small example:</p>

<p>``` ruby
class AddNumbers</p>

<p>  def initialize(*numbers)</p>

<pre><code>@numbers = numbers || []
</code></pre>

<p>  end</p>

<p>  def may_run?</p>

<pre><code>true
</code></pre>

<p>  end</p>

<p>  def run</p>

<pre><code>@numbers.inject(&amp;:+)
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Now the application knows how to add numbers via the <em>AddNumbers</em> class. We can create some
fast, database and framework independent unit tests. We can run it on <em>irb</em>, on a rake task
or on an async worker.</p>

<p>We build our application on top of interactors. And so should you.</p>
]]></content>
  </entry>
  
</feed>
